Should we prioritize this project?

A [finance]() perspective would say, prioritize the project iff its risk-adjusted [Net Present Value]() exceeds that of the next-best alternative. That is, to evaluate a project:
  1. Estimate the value of the project.
  2. Express that value as a probability distribution of cash inflows over time.
  3. Estimate the costs of the project.
  4. Estimate those costs as a probability distribution of cash outflows over time.
  5. Subtract the costs from the value.
  6. Adjust for risk, and take the expected present value of those cash flows.
  7. Pick the project with the highest risk-adjusted present value.

For example, let's say project A is a project to add an extra layer of software security, and is subject to the following events:
  Benefits
  - The project might prevent the system from being compromised in month X

  Costs
  - The project might go on schedule and cost an engineer two months of time. Otherwise, it never ships.
  - It might inadvertently introduce another security vulnerability, which is exploited.
  - It might add code complexity and make another project more complicated.
  - It might increase the likelihood of an engineer to burn out and have to be replaced.


Assume that an engineer costs 10000 a month.
So let's say, there's a 50% chance that the project never ships, but the engineer doesn't burn out. Then the flow is

[-10000, -10000, 0, 0, ...]

Then there is a 10% chance that the project never ships AND the engineer burns out, and it takes 5 months to spin up his replacement. Then the flow is
[-10000, -10000, -10000, -10000, -10000, -10000, -10000, 0, 0, ...]

Now say there's a 30% chance that the project ships on time, the engineer doesn't burn out, code complexity is added which causes another engineer to take month 4 doing work they otherwise wouldn't have to do, and it is all for nothing, because no attacker would have exploited the vulnerability had the project not shipped. Then the flow is
[-10000, -10000, 0, -10000, 0, 0, ...]

Now say there's a 5% chance that the project ships on time, the engineer doesn't burn out, no code complexity is added, and the project stops an exploit from happening in month 5 that would have done 150000 worth of damage to the company. Then the flow is
[-10000, -10000, 0, 0, 1500000, 0, 0, ...]

Now say there's a 5% chance that the same thing happened, except the exploit would have happened in month 9
[-10000, -10000, 0, 0, 0, 1500000, 0, 0, ...]

```javascript
scenario1 = (presentValue) =>
.5 * presentValue([-10000, -10000, 0, 0]) +
.1 * presentValue([-10000, -10000, -10000, -10000, -10000, -10000, -10000]) +
.3 * presentValue([-10000, -10000, 0, -10000, 0, 0]) +
.05 * presentValue([-10000, -10000, 0, 0, 1500000, 0, 0]) +
.05 * presentValue([-10000, -10000, 0, 0, 0, 0 ,0 , 0, 1500000])
```

Now let's say project B adds a feature that a big user is excited about that will take 6 months.

There's a 10% chance the feature doesn't ship, but the big user signs anyway in month 10, for 200000
There's a 10% chance the feature ships, but the big user doesn't sign
There's a 80% chance the feature ships, and the big user signs in month 7

```javascript
scenario2 = (presentValue) =>
.1 * presentValue([-10000, -10000, -10000, -10000, -10000, -10000, 0, 0, 0, 200000]) +
.1 * presentValue([-10000, -10000, -10000, -10000, -10000, -10000,]) +
.8 * presentValue([-10000, -10000, -10000, -10000, -10000, -10000, 200000])

```

So now suppose we have a "discount rates" of either .01, or .02 -- that is, a dollar this month is worth 99 cents next month in the first case, 98 cents next month in the next case.
```javascript
const withDiscountRate = r => vs => vs.map((v, i) => v * Math.pow(1 - r, i)).reduce((acc, cur) => acc + cur, 0)
console.log(scenario1(withDiscountRate(.02)), scenario2(withDiscountRate(.02))) // 105747.5393559699 101330.92661284299
console.log(scenario1(withDiscountRate(.01)), scenario2(withDiscountRate(.01))) // 113636.19062279299 110387.31825483282
```

Now really these cash flows should be adjusted for risk, but I don't have sophisticated enough knowledge of finance to know how to do that.

The point
